"""Add valor_entrada to Carne

Revision ID: 7c69526b016a
Revises: f9972ed9c685
Create Date: 2025-06-02 16:39:42.279875

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7c69526b016a'
down_revision: Union[str, None] = 'f9972ed9c685'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # REMOVA OU COMENTE TODAS AS LINHAS COMO ESTAS:
    # op.drop_index(op.f('idx_pagamento_data_pagamento'), table_name='pagamento')
    # op.drop_index(op.f('idx_pagamento_id_parcela'), table_name='pagamento')
    # op.drop_index(op.f('idx_pagamento_id_usuario_registro'), table_name='pagamento')
    # op.drop_table('pagamento')
    # op.drop_index(op.f('idx_carne_id_cliente'), table_name='carne')
    # op.drop_table('carne')
    # op.drop_index(op.f('idx_parcela_data_vencimento'), table_name='parcela')
    # op.drop_index(op.f('idx_parcela_id_carne'), table_name='parcela')
    # op.drop_index(op.f('idx_parcela_status_parcela'), table_name='parcela')
    # op.drop_table('parcela')
    # op.drop_index(op.f('idx_cliente_nome'), table_name='cliente')
    # op.drop_index(op.f('idx_cliente_telefone'), table_name='cliente')
    # op.drop_table('cliente')
    # op.drop_table('usuario') # <--- ESTA FOI A LINHA QUE CAUSOU O ERRO ATUAL

    # AS LINHAS QUE VOCÊ DEVE MANTER/ADICIONAR SÃO AS QUE ADICIONAM AS COLUNAS:
    op.add_column('carne', sa.Column('valor_entrada', sa.DECIMAL(10, 2), server_default='0.00', nullable=False))
    op.add_column('carne', sa.Column('forma_pagamento_entrada', sa.String(length=50), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('carne',
    sa.Column('id_carne', sa.INTEGER(), server_default=sa.text("nextval('carne_id_carne_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('id_cliente', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('descricao', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('valor_total_original', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('numero_parcelas', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('valor_parcela_original', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('data_criacao', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('data_primeiro_vencimento', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('frequencia_pagamento', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status_carne', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('observacoes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_cliente'], ['cliente.id_cliente'], name='carne_id_cliente_fkey'),
    sa.PrimaryKeyConstraint('id_carne', name='carne_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_carne_id_cliente'), 'carne', ['id_cliente'], unique=False)
    op.create_table('pagamento',
    sa.Column('id_pagamento', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_parcela', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data_pagamento', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('valor_pago', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('forma_pagamento', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('observacoes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_usuario_registro', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id_parcela'], ['parcela.id_parcela'], name=op.f('pagamento_id_parcela_fkey')),
    sa.ForeignKeyConstraint(['id_usuario_registro'], ['usuario.id_usuario'], name=op.f('pagamento_id_usuario_registro_fkey')),
    sa.PrimaryKeyConstraint('id_pagamento', name=op.f('pagamento_pkey'))
    )
    op.create_index(op.f('idx_pagamento_id_usuario_registro'), 'pagamento', ['id_usuario_registro'], unique=False)
    op.create_index(op.f('idx_pagamento_id_parcela'), 'pagamento', ['id_parcela'], unique=False)
    op.create_index(op.f('idx_pagamento_data_pagamento'), 'pagamento', ['data_pagamento'], unique=False)
    op.create_table('parcela',
    sa.Column('id_parcela', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_carne', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('numero_parcela', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('valor_devido', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('data_vencimento', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('valor_pago', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('saldo_devedor', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('data_pagamento_completo', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status_parcela', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('juros_multa', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('juros_multa_anterior_aplicada', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id_carne'], ['carne.id_carne'], name=op.f('parcela_id_carne_fkey')),
    sa.PrimaryKeyConstraint('id_parcela', name=op.f('parcela_pkey')),
    sa.UniqueConstraint('id_carne', 'numero_parcela', name=op.f('parcela_id_carne_numero_parcela_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_parcela_status_parcela'), 'parcela', ['status_parcela'], unique=False)
    op.create_index(op.f('idx_parcela_id_carne'), 'parcela', ['id_carne'], unique=False)
    op.create_index(op.f('idx_parcela_data_vencimento'), 'parcela', ['data_vencimento'], unique=False)
    op.create_table('cliente',
    sa.Column('id_cliente', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('cpf_cnpj', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('endereco', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('telefone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('data_cadastro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_cliente', name=op.f('cliente_pkey')),
    sa.UniqueConstraint('cpf_cnpj', name=op.f('cliente_cpf_cnpj_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_cliente_telefone'), 'cliente', ['telefone'], unique=False)
    op.create_index(op.f('idx_cliente_nome'), 'cliente', ['nome'], unique=False)
    op.create_table('usuario',
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('senha_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('data_cadastro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('ultimo_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ativo', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('perfil', sa.VARCHAR(length=50), server_default=sa.text("'admin'::character varying"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id_usuario', name=op.f('usuario_pkey')),
    sa.UniqueConstraint('email', name=op.f('usuario_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
